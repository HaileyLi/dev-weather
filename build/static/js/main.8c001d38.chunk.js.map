{"version":3,"sources":["Components/WeatherTable.jsx","Components/Loading.jsx","App.js","reportWebVitals.js","index.js"],"names":["WeatherTable","Fragment","border","this","props","weather","name","Date","toLocaleString","main","temp","wind","speed","React","Component","Loading","api","App","cityList","useState","city","setCity","setWeather","loading","setLoading","useEffect","getWeather","fetch","then","res","json","result","console","log","onChange","e","target","value","handleCityChange","map","item","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAqCeA,E,uKAjCP,OACI,cAAC,IAAMC,SAAP,UACI,uBAAOC,OAAO,IAAd,SACI,kCACI,+BACI,sCACA,6BAAKC,KAAKC,MAAMC,QAAQC,UAE5B,+BACI,8CACA,8BAAK,IAAIC,MAAOC,sBAEpB,+BACI,yCACA,6BAAKL,KAAKC,MAAMC,QAAQA,QAAQ,GAAGI,UAEvC,+BACI,6CACA,+BAAKN,KAAKC,MAAMC,QAAQI,KAAKC,KAA7B,cAEJ,+BACI,sCACA,+BAAKP,KAAKC,MAAMC,QAAQM,KAAKC,MAA7B,uB,GAxBDC,IAAMC,WCQlBC,MANf,WACI,OACI,2CCDFC,EACC,mCADDA,EAEE,2CAqDOC,MAjDf,WAEE,IAAMC,EAAW,CAAC,SAAU,YAAa,cAF5B,EAKWC,mBAASD,EAAS,IAL7B,mBAKNE,EALM,KAKAC,EALA,OAMiBF,mBAAS,IAN1B,mBAMNd,EANM,KAMGiB,EANH,OAOiBH,oBAAS,GAP1B,mBAONI,EAPM,KAOGC,EAPH,KAUbC,qBAAU,WACRC,EAAWN,KACV,IAGH,IAAMM,EAAa,SAACN,GAClBO,MAAM,GAAD,OAAIX,EAAJ,qBAAyBI,EAAzB,+BAAoDJ,IACtDY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJT,EAAWS,GACXV,EAAQ,IACRG,GAAW,GACXQ,QAAQC,IAAIF,OAYlB,OACE,eAAC,IAAM9B,SAAP,WACE,wBAAQiC,SAAU,SAAAC,GAAC,OATE,SAACA,GACxBd,EAAQc,EAAEC,OAAOC,OACjBb,GAAW,GACXE,EAAWS,EAAEC,OAAOC,OAMKC,CAAiBH,IAAxC,SACGjB,EAASqB,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAQJ,MAAOG,EAAf,SAAsCA,GAAZ,MAAQC,QAErClB,EACC,cAAC,EAAD,IACA,cAAC,EAAD,CAAclB,QAASA,QCzChBqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8c001d38.chunk.js","sourcesContent":["import React from 'react';\n\nclass WeatherTable extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <table border=\"1\">\n                    <tbody>\n                        <tr>\n                            <td>City</td>\n                            <td>{this.props.weather.name}</td>\n                        </tr>\n                        <tr>\n                            <td>Updated time</td>\n                            <td>{new Date().toLocaleString()}</td>\n                        </tr>\n                        <tr>\n                            <td>Weather</td>\n                            <td>{this.props.weather.weather[0].main}</td>\n                        </tr>\n                        <tr>\n                            <td>Temperature</td>\n                            <td>{this.props.weather.main.temp}Â°C</td>\n                        </tr>\n                        <tr>\n                            <td>Wind</td>\n                            <td>{this.props.weather.wind.speed}M/S</td>\n                        </tr>\n                    </tbody>\n\n                </table>\n            </React.Fragment>\n\n        );\n    }\n};\n\nexport default WeatherTable;\n","\n\nimport React from 'react';\n\nfunction Loading() {\n    return (\n        <div>loading</div>\n    );\n};\n\nexport default Loading;\n","import React, { useState, useEffect } from 'react';\nimport WeatherTable from './Components/WeatherTable.jsx';\nimport Loading from './Components/Loading.jsx';\n\n// import weather api\nconst api = {\n  key: \"330654833734435416e3ac946d2be83e\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n// main App component\nfunction App() {\n  // To add more cities in future, push more elements in cityList\n  const cityList = [\"Sydney\", \"Melbourne\", \"Wollongong\"]\n\n  // react hook\n  const [city, setCity] = useState(cityList[0]);\n  const [weather, setWeather] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  // use to fetch Data, work as componentDidMount\n  useEffect(() => {\n    getWeather(city)\n  }, [])\n\n  // fetch data\n  const getWeather = (city) => {\n    fetch(`${api.base}weather?q=${city}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        setCity('');\n        setLoading(false);\n        console.log(result);\n      });\n  }\n\n  // handle select change\n  const handleCityChange = (e) => {\n    setCity(e.target.value)\n    setLoading(true)\n    getWeather(e.target.value)\n  }\n\n  // dom render\n  return (\n    <React.Fragment>\n      <select onChange={e => handleCityChange(e)}>\n        {cityList.map((item, i) =>\n          <option value={item} key={\"key\" + i}>{item}</option>)}\n      </select>\n      {loading ?\n        <Loading /> :\n        <WeatherTable weather={weather} />\n      }\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}